{"version":3,"sources":["../../source/sandbox/lsb.js"],"names":[],"mappings":"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","file":"lsb.js","sourcesContent":["import { createRequire as CreateRequire } from 'module'\nimport FileSystem from 'fs-extra'\nimport Find from 'find'\nimport JSON5 from 'json5'\nimport Path from 'path'\nimport URL from 'url'\n\n// import Parse from '@kba/makefile-parser'\n\nconst FilePath = URL.fileURLToPath(import.meta.url)\nconst FolderPath = Path.dirname(FilePath)\nconst Process = process\n// const Require = CreateRequire(import.meta.url)\n\nasync function main() {\n\n  try {\n\n    let packagePath = Find.fileSync(/package\\.json$/, `${Process.cwd()}/node_modules`)\n      \n    for (let path of packagePath) {\n\n      // console.log(path)\n\n      let { name, bin: binary } = JSON5.parse(await FileSystem.readFile(path, { 'encoding': 'utf-8' }))\n\n      if (binary !== undefined) {\n\n        if (typeof binary === 'string') {\n          console.dir({\n            'packageName': name,\n            'binaryName': name\n          })\n        } else {\n\n          for (let property in binary) {\n            console.dir({\n              'packageName': name,\n              'binaryName': property\n            })\n          }\n\n        }\n\n      }\n\n    }\n\n    // get bin dir ... cd dir in arg, npm bin\n    // get contents of bin ... []\n\n    // console.dir(getPackagePath(`${FolderPath}/lsbd/a`))\n    // console.dir(await getBinary(`${FolderPath}/lsbd`))\n    // console.dir(await getBinary(`${Process.cwd()}/node_modules`))\n\n    // get each bin in node-mod/.bin\n    // find all package.j with bin = bin\n    // get \"name\" = \"@virtualpatterns/mablung-check-dependency\" from package.j\n\n    // foreach bin, if bin exists in recipe, package is dep\n\n  } catch (error) {\n    console.error(error)\n  }\n\n}\n\nasync function getPackagePath(path = `${Process.cwd()}/node_modules`) {\n\n  let item = await FileSystem.readdir(path, { 'encoding': 'utf-8', 'withFileTypes': true })\n  let promise = []\n\n  promise.concat(item\n    .filter((item) => item.isDirectory())\n    .map((item) => getPackagePath(`${path}/${item.name}`).then((result) => result.flat())))\n  \n  promise.concat(item\n    .filter((item) => item.isFile() && item.name === 'package.json')\n    .map((item) => `${path}/${item.name}`))\n  \n  console.dir(promise)\n  \n  return Promise.all(promise)\n\n}\n\nasync function getBinary(path) {\n  // console.log(`getBinary('${path}')`)\n\n  let information = await FileSystem.stat(path)\n\n  if (information.isFile()) {\n\n    let { name, bin } = JSON5.parse(await FileSystem.readFile(path, { 'encoding': 'utf-8' }))\n\n    return { name, bin }\n\n  } else {\n\n    let item = await FileSystem.readdir(path, { 'encoding': 'utf-8', 'withFileTypes': true })\n    \n    return (await Promise.all(item\n      .filter((item) => item.isDirectory() || (item.isFile() && item.name === 'package.json'))\n      .map((item) => getBinary(`${path}/${item.name}`)))).flat()\n    \n  }\n\n  // let promise = []\n  // let item = await FileSystem.readdir(path, { 'encoding': 'utf-8', 'withFileTypes': true })\n\n  // promise.concat(item\n  //   .filter((item) => item.isDirectory())\n  //   .map((directory) => getBinary(`${path}/${directory.name}`)))\n\n  // promise.concat(item\n  //   .filter((item) => item.isFile())\n  //   .filter((file) => file.name == 'package.json')\n  //   .map((file) => JSON5.parse(FileSystem.readFileSync(path, { 'encoding': 'utf-8' }))))\n\n  // return Promise.all(promise)\n\n}\n\n\n\nmain()"]}