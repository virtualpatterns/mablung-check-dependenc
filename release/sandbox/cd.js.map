{"version":3,"sources":["../../source/sandbox/cd.js"],"names":["Check","createRequire","CreateRequire","Path","Process","process","Require","import","meta","url","main","filePath","resolve","folderPath","dirname","option","parser","es7","default","special","bin","eslint","console","log","unused","dir","dependencies","devDependencies","missing","invalidFiles","invalidDirs","error"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,aAAa,IAAIC,aAA1B,QAA+C,QAA/C;AACA;AACA;AACA;AACA;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA;;AAEA;AACA;AACA,MAAMC,OAAO,GAAGC,OAAhB;AACA,MAAMC,OAAO,GAAGJ,aAAa,CAACK,MAAM,CAACC,IAAP,CAAYC,GAAb,CAA7B;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,eAAeC,IAAf,GAAsB;;AAEpB,MAAI;;AAEF,QAAIC,QAAQ,GAAGL,OAAO,CAACM,OAAR,CAAgB,4CAAhB,CAAf;AACA,QAAIC,UAAU,GAAGV,IAAI,CAACW,OAAL,CAAaH,QAAb,CAAjB,CAHE,CAGsC;;AAExC,QAAII,MAAM,GAAG;AACX,iBAAW;AACT,gBAAQf,KAAK,CAACgB,MAAN,CAAaC,GAAb,CAAiBC,OADhB;AAET,iBAASlB,KAAK,CAACgB,MAAN,CAAaC,GAAb,CAAiBC,OAFjB,EADA;;AAKX,iBAAW;AACTlB,MAAAA,KAAK,CAACmB,OAAN,CAAcC,GADL;AAETpB,MAAAA,KAAK,CAACmB,OAAN,CAAcE,MAFL,CALA,EAAb;;;;AAWAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,UAAZ;;AAEAb,IAAAA,KAAK,CAACa,UAAD,EAAaE,MAAb,EAAqB,CAACS,MAAD,KAAY;AACpCF,MAAAA,OAAO,CAACG,GAAR,CAAYD,MAAM,CAACE,YAAnB,EADoC,CACH;AACjCJ,MAAAA,OAAO,CAACG,GAAR,CAAYD,MAAM,CAACG,eAAnB,EAFoC,CAEA;AACpCL,MAAAA,OAAO,CAACG,GAAR,CAAYD,MAAM,CAACI,OAAnB,EAHoC,CAGR;AAC5B;AACAN,MAAAA,OAAO,CAACG,GAAR,CAAYD,MAAM,CAACK,YAAnB,EALoC,CAKH;AACjCP,MAAAA,OAAO,CAACG,GAAR,CAAYD,MAAM,CAACM,WAAnB,EANoC,CAMJ;AACjC,KAPI,CAAL;;AASD,GA3BD,CA2BE,OAAOC,KAAP,EAAc;AACdT,IAAAA,OAAO,CAACS,KAAR,CAAcA,KAAd;AACD;;AAEF;;AAEDrB,IAAI","sourcesContent":["// import '@virtualpatterns/mablung-source-map-support/install'\nimport Check from 'depcheck'\nimport { createRequire as CreateRequire } from 'module'\n// import FileSystem from 'fs-extra'\n// import Is from '@pwn/is'\n// import JSON5 from 'json5'\n// import Match from 'minimatch'\nimport Path from 'path'\n// import Query from 'jsonpath'\n\n// const FilePath = __filePath\n// const FolderPath = Path.dirname(FilePath)\nconst Process = process\nconst Require = CreateRequire(import.meta.url)\n\n// function parseAvaFromPackage(filePath) {\n\n//   console.log(`content = '${content}'`)\n\n//   // let Package = JSON5.parse(content)\n//   // let ava = Package.ava\n//   // let dependencyName = ava.require\n\n//   // return dependencyName\n\n// }\n\n// async function parseStaticBabelConfiguration(filePath) {\n//   // console.log(`parseStaticBabelConfiguration('${Path.relative('', filePath)}') { ... }`)\n\n//   let dependency = []\n\n//   let fileName = Path.basename(filePath)\n//   let pattern = [ 'package.json', 'babel.config.json', '.babelrc.json', 'poop*.json' ]\n\n//   if (pattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(fileName, pattern, { 'dot': true }), false)) {\n\n//     let configuration = null\n//     configuration = JSON5.parse(await FileSystem.readFile(filePath, { 'encoding': 'utf-8' }))\n//     configuration = fileName === 'package.json' ? (configuration.babel || {}) : configuration\n\n//     let plugin = null\n//     plugin = Query.query(configuration, '$..plugins[*]')\n//     plugin = plugin.filter((plugin) => Is.array(plugin) || plugin !== 'importMeta')\n//     plugin = plugin.map((plugin) => Is.array(plugin) ? plugin[0] : plugin)\n\n//     let preset = null\n//     preset = Query.query(configuration, '$..presets[*]')\n//     preset = preset.map((preset) => Is.array(preset) ? preset[0] : preset)\n\n//     dependency = [...plugin, ...preset]\n\n//   }\n\n//   return dependency\n\n// }\n\nasync function main() {\n\n  try {\n\n    let filePath = Require.resolve('../../../mablung-babel-plugin/package.json')\n    let folderPath = Path.dirname(filePath) // Process.cwd() // \n\n    let option = {\n      'parsers': {\n        '*.js': Check.parser.es7.default,\n        '*.cjs': Check.parser.es7.default\n      },\n      'special': [\n        Check.special.bin,\n        Check.special.eslint\n      ]\n    }\n\n    console.log(folderPath)\n\n    Check(folderPath, option, (unused) => {\n      console.dir(unused.dependencies) // an array containing the unused dependencies\n      console.dir(unused.devDependencies) // an array containing the unused devDependencies\n      console.dir(unused.missing) // a lookup containing the dependencies missing in `package.json` and where they are used\n      // console.dir(unused.using) // a lookup indicating each dependency is used by which files\n      console.dir(unused.invalidFiles) // files that cannot access or parse\n      console.dir(unused.invalidDirs) // directories that cannot access\n    })\n\n  } catch (error) {\n    console.error(error)\n  }\n\n}\n\nmain()"],"file":"cd.js"}