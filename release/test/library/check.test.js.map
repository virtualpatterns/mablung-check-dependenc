{"version":3,"sources":["../../../source/test/library/check.test.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,IAAP,MAAiB,KAAjB;AACA,OAAO,GAAP,MAAgB,KAAhB;;AAEA,SAAS,KAAT,EAAgB,cAAhB,QAAsC,gBAAtC;;AAEA,MAAM,QAAQ,GAAG,GAAG,CAAC,aAAJ,CAAkB,MAAM,CAAC,IAAP,CAAY,GAA9B,CAAjB;AACA,MAAM,UAAU,GAAG,IAAI,CAAC,OAAL,CAAa,QAAb,CAAnB;AACA,MAAM,OAAO,GAAG,OAAhB;;AAEA;AACA;AACA,MAAM,YAAY,GAAG,IAAI,CAAC,SAAL,CAAgB,GAAE,UAAW,wCAA7B,CAArB;;AAEA,IAAI,CAAC,mDAAD,EAAsD,OAAO,IAAP,KAAgB;AACxE,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,eAAjB,EAAiC,EAAE,eAAe,CAAE,qCAAF,CAAjB,EAAjC,CAA1B,EAA0H;AACxH,eAAW,EAD6G;AAExH,cAAU,EAF8G;AAGxH,YAAQ,EAHgH,EAA1H;;AAKD,CANG,CAAJ;;AAQA,IAAI,CAAC,uDAAD,EAA0D,OAAO,IAAP,KAAgB;AAC5E,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,iBAAjB,EAAmC,EAAE,iBAAiB,CAAE,mBAAF,CAAnB,EAAnC,CAA1B,EAA4G;AAC1G,eAAW,EAD+F;AAE1G,cAAU;AACR,yCADQ,CAFgG;;AAK1G,YAAQ,EALkG,EAA5G;;AAOD,CARG,CAAJ;;AAUA,IAAI,CAAC,wCAAD,EAA2C,OAAO,IAAP,KAAgB;AAC7D,QAAM,IAAI,CAAC,WAAL,CAAiB,KAAK,CAAE,GAAE,YAAa,QAAjB,CAAtB,EAAiD,EAAE,cAAc,cAAhB,EAAjD,CAAN;AACD,CAFG,CAAJ;;AAIA,IAAI,CAAC,yDAAD,EAA4D,OAAO,IAAP,KAAgB;AAC9E,EAAA,IAAI,CAAC,EAAL,CAAQ,OAAO,CAAC,GAAR,EAAR,EAAuB,IAAI,CAAC,SAAL,CAAgB,GAAE,UAAW,WAA7B,CAAvB;AACA,QAAM,IAAI,CAAC,cAAL,CAAoB,KAAK,CAAC,8CAAD,CAAzB,CAAN;AACD,CAHG,CAAJ","file":"check.test.js","sourcesContent":["import Path from 'path'\nimport Test from 'ava'\nimport URL from 'url'\n\nimport { Check, FileParseError } from '../../index.js'\n\nconst FilePath = URL.fileURLToPath(import.meta.url)\nconst FolderPath = Path.dirname(FilePath)\nconst Process = process\n\n// the resources in source are used because \n// babel doesn't copy dot files (e.g. .babelrc.json)\nconst ResourcePath = Path.normalize(`${FolderPath}/../../../source/test/library/resource`)\n\nTest('Check(\\'ignore-match\\', { ignoreMatch: [ ... ] })', async (test) => {\n  test.deepEqual(await Check(`${ResourcePath}/ignore-match`, { 'ignoreMatch': [ '@virtualpatterns/mablung-dependency' ] }), { \n    'missing': {}, \n    'unused': [],\n    'used': {}\n  })\n})\n\nTest('Check(\\'ignore-pattern\\', { ignorePattern: [ ... ] })', async (test) => {\n  test.deepEqual(await Check(`${ResourcePath}/ignore-pattern`, { 'ignorePattern': [ 'ignore-pattern.js' ] }), { \n    'missing': {}, \n    'unused': [\n      '@virtualpatterns/mablung-dependency'\n    ],\n    'used': {}\n  })\n})\n\nTest('Check(\\'error\\') throws FileParseError', async (test) => {\n  await test.throwsAsync(Check(`${ResourcePath}/error`), { 'instanceOf': FileParseError })\n})\n\nTest('Check(\\'./release/test/library/resource/ignore-match\\')', async (test) => {\n  test.is(Process.cwd(), Path.normalize(`${FolderPath}/../../..`))\n  await test.notThrowsAsync(Check('./release/test/library/resource/ignore-match'))\n})\n"]}