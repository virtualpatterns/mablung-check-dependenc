{"version":3,"sources":["../../../source/test/library/check-parcel.test.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,IAAP,MAAiB,KAAjB;AACA,OAAO,GAAP,MAAgB,KAAhB;;AAEA,SAAS,KAAT,QAAsB,gBAAtB;;AAEA,MAAM,QAAQ,GAAG,GAAG,CAAC,aAAJ,CAAkB,MAAM,CAAC,IAAP,CAAY,GAA9B,CAAjB;AACA,MAAM,UAAU,GAAG,IAAI,CAAC,OAAL,CAAa,QAAb,CAAnB;;AAEA,MAAM,YAAY,GAAG,IAAI,CAAC,SAAL,CAAgB,GAAE,UAAW,kBAA7B,CAArB;;AAEA,IAAI,CAAC,kCAAD,EAAqC,OAAO,IAAP,KAAgB;AACvD,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,oBAAjB,EAAsC,EAAtC,CAA1B,EAAqE;AACnE,eAAW,EADwD;AAEnE,cAAU;AACR,oBADQ,CAFyD;;AAKnE,YAAQ,EAL2D,EAArE;;AAOD,CARG,CAAJ;;AAUA,IAAI,CAAC,+BAAD,EAAkC,OAAO,IAAP,KAAgB;AACpD,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,iBAAjB,EAAmC,EAAnC,CAA1B,EAAkE;AAChE,eAAW,EADqD;AAEhE,cAAU;AACR,oBADQ,CAFsD;;AAKhE,YAAQ;AACN,oDAA8C,CAAG,GAAE,YAAa,8BAAlB,CADxC,EALwD,EAAlE;;;AASD,CAVG,CAAJ;;AAYA,IAAI,CAAC,2BAAD,EAA8B,OAAO,IAAP,KAAgB;AAChD,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,aAAjB,EAA+B,EAA/B,CAA1B,EAA8D;AAC5D,eAAW,EADiD;AAE5D,cAAU,EAFkD;AAG5D,YAAQ,EAHoD,EAA9D;;AAKD,CANG,CAAJ;;AAQA,IAAI,CAAC,kCAAD,EAAqC,OAAO,IAAP,KAAgB;AACvD,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,oBAAjB,EAAsC,EAAtC,CAA1B,EAAqE;AACnE,eAAW,EADwD;AAEnE,cAAU;AACR,gDADQ,CAFyD;;AAKnE,YAAQ,EAL2D,EAArE;;AAOD,CARG,CAAJ;;AAUA,IAAI,CAAC,8BAAD,EAAiC,OAAO,IAAP,KAAgB;AACnD,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,gBAAjB,EAAkC,EAAlC,CAA1B,EAAiE;AAC/D,eAAW,EADoD;AAE/D,cAAU,EAFqD;AAG/D,YAAQ,EAHuD,EAAjE;;AAKD,CANG,CAAJ","file":"check-parcel.test.js","sourcesContent":["import Path from 'path'\nimport Test from 'ava'\nimport URL from 'url'\n\nimport { Check } from '../../index.js'\n\nconst FilePath = URL.fileURLToPath(import.meta.url)\nconst FolderPath = Path.dirname(FilePath)\n\nconst ResourcePath = Path.normalize(`${FolderPath}/resource/parcel`)\n\nTest('Check(\\'bundler-no-plugin\\', {})', async (test) => {\n  test.deepEqual(await Check(`${ResourcePath}/bundler-no-plugin`, {}), { \n    'missing': {}, \n    'unused': [\n      'parcel-bundler'\n    ],\n    'used': {}\n  })\n})\n\nTest('Check(\\'bundler-plugin\\', {})', async (test) => {\n  test.deepEqual(await Check(`${ResourcePath}/bundler-plugin`, {}), { \n    'missing': {}, \n    'unused': [\n      'parcel-bundler'\n    ],\n    'used': {\n      '@virtualpatterns/parcel-plugin-virtual-pug': [ `${ResourcePath}/bundler-plugin/package.json` ]\n    }\n  })\n})\n\nTest('Check(\\'no-bundler\\', {})', async (test) => {\n  test.deepEqual(await Check(`${ResourcePath}/no-bundler`, {}), { \n    'missing': {}, \n    'unused': [],  \n    'used': {}\n  })  \n})  \n\nTest('Check(\\'no-bundler-plugin\\', {})', async (test) => {\n  test.deepEqual(await Check(`${ResourcePath}/no-bundler-plugin`, {}), { \n    'missing': {}, \n    'unused': [\n      '@virtualpatterns/parcel-plugin-virtual-pug'\n    ],\n    'used': {}\n  })\n})\n\nTest('Check(\\'no-dependency\\', {})', async (test) => {\n  test.deepEqual(await Check(`${ResourcePath}/no-dependency`, {}), { \n    'missing': {}, \n    'unused': [],\n    'used': {}\n  })  \n})  \n"]}