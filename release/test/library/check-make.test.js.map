{"version":3,"sources":["../../../source/test/library/check-make.test.js"],"names":[],"mappings":"AAAA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,IAAP,MAAiB,KAAjB;AACA,OAAO,GAAP,MAAgB,KAAhB;;AAEA,SAAS,KAAT,QAAsB,gBAAtB;;AAEA,MAAM,QAAQ,GAAG,GAAG,CAAC,aAAJ,CAAkB,MAAM,CAAC,IAAP,CAAY,GAA9B,CAAjB;AACA,MAAM,UAAU,GAAG,IAAI,CAAC,OAAL,CAAa,QAAb,CAAnB;AACA,MAAM,OAAO,GAAG,OAAhB;;AAEA,MAAM,YAAY,GAAG,IAAI,CAAC,SAAL,CAAgB,GAAE,UAAW,gBAA7B,CAArB;;AAEA,IAAI,CAAC,MAAL,CAAY,iCAAZ,EAA+C,OAAO,IAAP,KAAgB;AAC7D,EAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,IAAgC,GAAE,YAAa,4BAA/C;AACA,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,mBAAjB,EAAqC,EAArC,CAA1B,EAAoE;AAClE,eAAW,EADuD;AAElE,cAAU,EAFwD;AAGlE,YAAQ,EAH0D,EAApE;;AAKD,CAPD;;AASA,IAAI,CAAC,MAAL,CAAY,gCAAZ,EAA8C,OAAO,IAAP,KAAgB;AAC5D,EAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,IAAgC,GAAE,YAAa,2BAA/C;AACA,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,kBAAjB,EAAoC,EAApC,CAA1B,EAAmE;AACjE,eAAW,EADsD;AAEjE,cAAU;AACR,SADQ,CAFuD;;AAKjE,YAAQ,EALyD,EAAnE;;AAOD,CATD;;AAWA,IAAI,CAAC,MAAL,CAAY,sCAAZ,EAAoD,OAAO,IAAP,KAAgB;AAClE,EAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,IAAgC,GAAE,YAAa,iCAA/C;AACA,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,wBAAjB,EAA0C,EAA1C,CAA1B,EAAyE;AACvE,eAAW,EAD4D;AAEvE,cAAU,EAF6D;AAGvE,YAAQ;AACN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CADD;AAEN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CAFD;AAGN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CAHD;AAIN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CAJD;AAKN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CALD;AAMN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CAND;AAON,aAAO,CAAE,GAAE,YAAa,iCAAjB,CAPD;AAQN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CARD;AASN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CATD;AAUN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CAVD;AAWN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CAXD;AAYN,aAAO,CAAE,GAAE,YAAa,iCAAjB,CAZD,EAH+D,EAAzE;;;AAkBD,CApBD;;AAsBA,IAAI,CAAC,MAAL,CAAY,sCAAZ,EAAoD,OAAO,IAAP,KAAgB;AAClE,EAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,IAAgC,GAAE,YAAa,mCAAkC,YAAa,kDAA9F;AACA,EAAA,IAAI,CAAC,SAAL,CAAe,MAAM,KAAK,CAAE,GAAE,YAAa,wBAAjB,EAA0C,EAA1C,CAA1B,EAAyE;AACvE,eAAW,EAD4D;AAEvE,cAAU,EAF6D;AAGvE,YAAQ;AACN,aAAO;AACJ,SAAE,YAAa,iCADX,CADD,EAH+D,EAAzE;;;;AASD,CAXD","file":"check-make.test.js","sourcesContent":["import Path from 'path'\nimport Test from 'ava'\nimport URL from 'url'\n\nimport { Check } from '../../index.js'\n\nconst FilePath = URL.fileURLToPath(import.meta.url)\nconst FolderPath = Path.dirname(FilePath)\nconst Process = process\n\nconst ResourcePath = Path.normalize(`${FolderPath}/resource/make`)\n\nTest.serial('Check(\\'makefile/missing\\', {})', async (test) => {\n  Process.env['MAKEFILE_PATH'] = `${ResourcePath}/makefile/missing/makefile`\n  test.deepEqual(await Check(`${ResourcePath}/makefile/missing`, {}), {\n    'missing': {},\n    'unused': [],\n    'used': {}\n  })\n})\n\nTest.serial('Check(\\'makefile/unused\\', {})', async (test) => {\n  Process.env['MAKEFILE_PATH'] = `${ResourcePath}/makefile/unused/makefile`\n  test.deepEqual(await Check(`${ResourcePath}/makefile/unused`, {}), {\n    'missing': {},\n    'unused': [\n      'shx'\n    ],\n    'used': {}\n  })\n})\n\nTest.serial('Check(\\'makefile/used/default\\', {})', async (test) => {\n  Process.env['MAKEFILE_PATH'] = `${ResourcePath}/makefile/used/default/makefile`\n  test.deepEqual(await Check(`${ResourcePath}/makefile/used/default`, {}), {\n    'missing': {},\n    'unused': [],\n    'used': {\n      'abc': [`${ResourcePath}/makefile/used/default/makefile`],\n      'bcd': [`${ResourcePath}/makefile/used/default/makefile`],\n      'cde': [`${ResourcePath}/makefile/used/default/makefile`],\n      'def': [`${ResourcePath}/makefile/used/default/makefile`],\n      'efg': [`${ResourcePath}/makefile/used/default/makefile`],\n      'fgh': [`${ResourcePath}/makefile/used/default/makefile`],\n      'ghi': [`${ResourcePath}/makefile/used/default/makefile`],\n      'hij': [`${ResourcePath}/makefile/used/default/makefile`],\n      'ijk': [`${ResourcePath}/makefile/used/default/makefile`],\n      'jkl': [`${ResourcePath}/makefile/used/default/makefile`],\n      'klm': [`${ResourcePath}/makefile/used/default/makefile`],\n      'lmn': [`${ResourcePath}/makefile/used/default/makefile`]\n    }\n  })\n})\n\nTest.serial('Check(\\'makefile/used/include\\', {})', async (test) => {\n  Process.env['MAKEFILE_PATH'] = `${ResourcePath}/makefile/used/include/makefile ${ResourcePath}/makefile/used/include/node_modules/shx/makefile`\n  test.deepEqual(await Check(`${ResourcePath}/makefile/used/include`, {}), {\n    'missing': {},\n    'unused': [],\n    'used': {\n      'shx': [\n        `${ResourcePath}/makefile/used/include/makefile`\n      ]\n    }\n  })\n})\n"]}