{"version":3,"sources":["../../source/command/check-dependency.js"],"names":[],"mappings":"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","file":"check-dependency.js","sourcesContent":["#!/usr/bin/env node\n\nimport '@virtualpatterns/mablung-source-map-support/install'\nimport { createRequire as CreateRequire } from 'module'\nimport Command from 'commander'\nimport FileSystem from 'fs-extra'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Path from 'path'\n\nimport { Check } from '../library/check.js'\n\nconst Process = process\nconst Require = CreateRequire(import.meta.url)\n\nconst Package = JSON5.parse(FileSystem.readFileSync(Require.resolve('../../package.json')), { 'encoding': 'utf-8' })\n\nCommand\n  .version(Package.version)\n  .option('--project-path <path>', 'Path of the project to check', '.') // Process.cwd())\n  .option('--configuration-path <path>', 'Path of the configuration file, if it exists', './check-dependency.json')\n  .option('--report-missing', 'Report missing dependencies', true)\n  .option('--no-report-missing', 'Do not report missing dependencies')\n  .option('--report-unused', 'Report used dependencies', true)\n  .option('--no-report-unused', 'Do not report used dependencies')\n  .option('--report-used', 'Report used dependencies', false)\n  .action(async (option) => {\n\n    try {\n\n      let path = option.projectPath\n      let configuration = null\n\n      if (await FileSystem.pathExists(option.configurationPath)) {\n        configuration = JSON5.parse(await FileSystem.readFile(option.configurationPath, { 'encoding': 'utf-8' }))\n      } else {\n        configuration = {}\n      }\n\n      let dependency = await Check(path, configuration)\n      // console.dir(dependency)\n\n      process.exitCode = 0\n\n      if (Is.not.emptyObject(dependency.missing) &&\n          option.reportMissing) {\n\n        let missingDependency = null\n        missingDependency = Object.entries(dependency.missing)\n        missingDependency = missingDependency.sort(([leftDependency], [rightDependency]) => leftDependency.localeCompare(rightDependency))\n\n        console.log('-'.repeat(80))\n        console.log('Missing dependencies')\n        console.log('-'.repeat(80))\n\n        missingDependency.forEach(([dependency, path]) => {\n          console.log(`${dependency} used in ...`)\n          console.log(path.sort().map((path) => `  ${Path.relative('', path)}`).join('\\n'))\n        })\n\n        console.log()\n\n        process.exitCode = 1\n\n      }\n      \n      if (dependency.unused.length > 0 &&\n          option.reportUnused) {\n\n        console.log('-'.repeat(80))\n        console.log('Unused dependencies')\n        console.log('-'.repeat(80))\n        console.log(dependency.unused.sort().map((dependency) => `${dependency}`).join('\\n'))\n        console.log()\n\n        process.exitCode = 1\n\n      }\n\n      if (Is.not.emptyObject(dependency.used) &&\n          option.reportUsed) {\n\n        let usedDependency = null\n        usedDependency = Object.entries(dependency.used)\n        usedDependency = usedDependency.sort(([leftDependency], [rightDependency]) => leftDependency.localeCompare(rightDependency))\n    \n        console.log('-'.repeat(80))\n        console.log('Used dependencies')\n        console.log('-'.repeat(80))\n\n        usedDependency.forEach(([dependency, path]) => {\n          console.log(`${dependency} used in ...`)\n          console.log(path.sort().map((path) => `  ${Path.relative('', path)}`).join('\\n'))\n        })\n\n        console.log()\n\n      }\n\n      // if (process.exitCode === 0) {\n        \n      //   console.log('-'.repeat(80))\n      //   console.log('There are no dependency issues.')\n      //   console.log('-'.repeat(80))\n\n      // }\n      \n    } catch (error) {\n      console.error(error)\n      process.exitCode = 2\n    }\n\n  })\n\nCommand.parse(Process.argv)\n"]}