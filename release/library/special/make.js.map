{"version":3,"sources":["../../../source/library/special/make.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,UAAvB;AACA,OAAO,KAAP,MAAkB,sBAAlB;AACA,OAAO,KAAP,MAAkB,UAAlB;;AAEA,SAAS,mBAAT,QAAoC,6BAApC;;AAEA,MAAM,OAAO,GAAG,OAAhB;;AAEA,OAAO,eAAe,IAAf,CAAoB,QAApB,EAA8B,iBAA9B,EAAiD,WAAjD,EAA8D;AACnE;AACA;AACA;;AAEA,MAAI,cAAc,GAAG,EAArB;AACA,MAAI,YAAY,GAAG,OAAO,CAAC,GAAR,CAAY,eAAZ,CAAnB;;AAEA,MAAI,YAAJ,EAAkB;;AAEhB,IAAA,YAAY,GAAG,YAAY;AACxB,IAAA,KADY,CACN,GADM,CAAf;;AAGA,QAAI,YAAY,CAAC,QAAb,CAAsB,QAAtB,CAAJ,EAAqC;;AAEnC,UAAI,gBAAgB,GAAG,MAAM,mBAAmB,CAAC,iBAAD,EAAoB,OAAM,UAAU,CAAC,UAAX,CAAuB,GAAE,WAAY,eAArC,CAAN,IAA8D,GAAE,WAAY,eAA5E,GAA6F,WAAjH,CAAhD;;AAEA,WAAK,IAAI,IAAT,IAAiB,YAAjB,EAA+B;;AAE7B,YAAI,EAAE,GAAF,KAAU,KAAK,CAAC,MAAM,UAAU,CAAC,QAAX,CAAoB,IAApB,EAA0B,EAAE,YAAY,OAAd,EAA1B,CAAP,CAAnB;AACA,YAAI,MAAM,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,EAAiB,cAAjB,CAAb;;AAEA,QAAA,cAAc,GAAG,cAAc;AAC5B,QAAA,MADc;;AAGb,QAAA,gBAAgB;AACb,QAAA,MADH,CACU,CAAC,MAAD,KAAY;;AAElB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEgB,cAAI,aAAa,GAAG,IAAI,MAAJ,CAAY,gBAAe,MAAM,CAAC,UAAW,kBAAiB,MAAM,CAAC,UAAW,oBAAmB,MAAM,CAAC,UAAW,mBAAkB,MAAM,CAAC,UAAW,WAAU,MAAM,CAAC,UAAW,KAArL,EAA2L,GAA3L,CAApB;AACA,iBAAO,MAAM;AACV,UAAA,MADI,CACG,CAAC,MAAD,KAAY,aAAa,CAAC,IAAd,CAAmB,MAAnB,CADf;AAEJ,UAAA,MAFI,GAEK,CAFZ;;AAID,SAxBH;AAyBG,QAAA,GAzBH,CAyBO,CAAC,MAAD,KAAY,MAAM,CAAC,WAzB1B,CAHa,CAAjB;;;;AAgCA,QAAA,cAAc,GAAG,cAAc;AAC5B,QAAA,MADc,CACP,iBAAiB,CAAC,MAAlB,CAAyB,CAAC,UAAD,KAAgB,IAAI,CAAC,OAAL,CAAc,gBAAe,UAAW,EAAxC,MAA+C,CAAC,CAAzF,CADO,CAAjB;;AAGD;;AAED,MAAA,cAAc,GAAG,cAAc;AAC5B,MAAA,MADc,CACP,CAAC,UAAD,EAAa,KAAb,EAAoB,cAApB,KAAuC,cAAc,CAAC,OAAf,CAAuB,UAAvB,MAAuC,KADvE,CAAjB;;AAGD;;AAEF;;AAED,SAAO,cAAP;;AAED","file":"make.js","sourcesContent":["import FileSystem from 'fs-extra'\nimport Parse from '@kba/makefile-parser'\nimport Query from 'jsonpath'\n\nimport { GetDependencyBinary } from '../get-dependency-binary.js'\n\nconst Process = process\n\nexport async function Make(filePath, packageDependency, packagePath) {\n  // console.log(`Make('${Path.relative('', filePath)}', packageDependency, '${Path.relative('', packagePath)}') { ... }`)\n  // console.dir(packageDependency)\n  // console.log(`Process.env['MAKEFILE_PATH'] = ${Process.env['MAKEFILE_PATH']}`)\n\n  let fileDependency = []\n  let makefilePath = Process.env['MAKEFILE_PATH']\n\n  if (makefilePath) {\n\n    makefilePath = makefilePath\n      .split(' ')\n\n    if (makefilePath.includes(filePath)) {\n\n      let dependencyBinary = await GetDependencyBinary(packageDependency, await FileSystem.pathExists(`${packagePath}/node_modules`) ? `${packagePath}/node_modules` : packagePath)\n\n      for (let path of makefilePath) {\n\n        let { ast } = Parse(await FileSystem.readFile(path, { 'encoding': 'utf-8' }))\n        let recipe = Query.query(ast, '$..recipe[*]')\n\n        fileDependency = fileDependency\n          .concat(\n\n            dependencyBinary\n              .filter((binary) => {\n\n                /*\n                  binaryPattern includes ...\n                  abc\n                  @bcd\n                  -cde\n                  @-def\n                  -@efg\n                  fgh X\n                  @-X ghi\n                  -@X hij X\n                  $(abc)/ijk\n                   jkl\n                  klm \n                  $(lmn)\n                */\n\n                let binaryPattern = new RegExp(`^[@\\\\-/]{0,2}${binary.binaryName}$|^[@\\\\-/]{0,2}${binary.binaryName}\\\\s+.*$|.*[\\\\s/]+${binary.binaryName}\\\\s+.*|.*[\\\\s/]+${binary.binaryName}$|\\\\$\\\\(${binary.binaryName}\\\\)`, 'm')\n                return recipe\n                  .filter((recipe) => binaryPattern.test(recipe))\n                  .length > 0\n\n              })\n              .map((binary) => binary.packageName)\n\n          )\n\n        fileDependency = fileDependency\n          .concat(packageDependency.filter((dependency) => path.indexOf(`node_modules/${dependency}`) !== -1))\n        \n      }\n\n      fileDependency = fileDependency\n        .filter((dependency, index, fileDependency) => fileDependency.indexOf(dependency) === index)\n\n    }\n\n  }\n  \n  return fileDependency\n\n}"]}