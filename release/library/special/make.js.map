{"version":3,"sources":["../../../source/library/special/make.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,UAAvB;AACA;AACA,OAAO,KAAP,MAAkB,WAAlB;AACA,OAAO,KAAP,MAAkB,sBAAlB;AACA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAP,MAAkB,UAAlB;;AAEA,SAAS,mBAAT,QAAoC,6BAApC;;AAEA;;AAEA,OAAO,eAAe,IAAf,CAAoB,QAApB,EAA8B,iBAA9B,EAAiD,WAAjD,EAA8D;AACnE;AACA;;AAEA,MAAI,cAAc,GAAG,EAArB;;AAEA,MAAI,QAAQ,GAAG,IAAI,CAAC,QAAL,CAAc,QAAd,CAAf;AACA,MAAI,WAAW,GAAG,CAAC,UAAD,EAAa,UAAb,CAAlB;;AAEA;AACA;AACA;AACA;;AAEA,MAAI,WAAW,CAAC,MAAZ,CAAmB,CAAC,OAAD,EAAU,OAAV,KAAsB,OAAO,GAAG,OAAH,GAAa,KAAK,CAAC,QAAD,EAAW,OAAX,CAAlE,EAAuF,KAAvF,CAAJ,EAAmG;;AAEjG,QAAI,gBAAgB,GAAG,MAAM,mBAAmB,CAAC,iBAAD,EAAoB,OAAM,UAAU,CAAC,UAAX,CAAuB,GAAE,WAAY,eAArC,CAAN,IAA8D,GAAE,WAAY,eAA5E,GAA6F,WAAjH,CAAhD;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAI,EAAE,GAAG,EAAE,OAAP,KAAmB,KAAK,CAAC,MAAM,UAAU,CAAC,QAAX,CAAoB,QAApB,EAA8B,EAAE,YAAY,OAAd,EAA9B,CAAP,CAA5B;AACA,QAAI,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,OAAZ,EAAqB,cAArB,CAAjB;;AAEA,IAAA,cAAc,GAAG,gBAAgB;AAC9B,IAAA,MADc,CACP,CAAC,MAAD,KAAY;AAClB,UAAI,aAAa,GAAG,IAAI,MAAJ,CAAY,cAAa,MAAM,CAAC,UAAW,gBAAe,MAAM,CAAC,UAAW,iBAAgB,MAAM,CAAC,UAAW,gBAAe,MAAM,CAAC,UAAW,GAA/I,EAAmJ,GAAnJ,CAApB;AACA,aAAO,UAAU;AACd,MAAA,MADI,CACG,CAAC,MAAD,KAAY,aAAa,CAAC,IAAd,CAAmB,MAAnB,CADf;AAEJ,MAAA,MAFI,GAEK,CAFZ;AAGD,KANc;AAOd,IAAA,GAPc,CAOV,CAAC,MAAD,KAAY,MAAM,CAAC,WAPT;AAQd,IAAA,MARc,CAQP,CAAC,UAAD,EAAa,KAAb,EAAoB,cAApB,KAAuC,cAAc,CAAC,OAAf,CAAuB,UAAvB,MAAuC,KARvE,CAAjB;;AAUD;;AAED,SAAO,cAAP;;AAED","file":"make.js","sourcesContent":["import FileSystem from 'fs-extra'\n// import Is from '@pwn/is'\nimport Match from 'minimatch'\nimport Parse from '@kba/makefile-parser'\nimport Path from 'path'\nimport Query from 'jsonpath'\n\nimport { GetDependencyBinary } from '../get-dependency-binary.js'\n\n// const Process = process\n\nexport async function Make(filePath, packageDependency, packagePath) {\n  // console.log(`Make('${Path.relative('', filePath)}', packageDependency, '${Path.relative('', packagePath)}') { ... }`)\n  // console.dir(packageDependency)\n\n  let fileDependency = []\n\n  let fileName = Path.basename(filePath)\n  let filePattern = ['Makefile', 'makefile']\n\n  // if (Is.not.undefined(Process.env['MAKEFILE'])) {\n  //   filePattern.concat(Process.env['MAKEFILE'].split(' ')\n  //     .map((path) => Path.basename(path)))\n  // }\n\n  if (filePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(fileName, pattern), false)) {\n\n    let dependencyBinary = await GetDependencyBinary(packageDependency, await FileSystem.pathExists(`${packagePath}/node_modules`) ? `${packagePath}/node_modules` : packagePath)\n\n    /*\n      Assumming shx is the binary, supports ...\n      shx\n      @shx\n      -shx\n      @-shx\n      -@shx\n      shx X\n      @-X shx\n      -@X shx X\n    */\n    \n    let { ast: fileAst } = Parse(await FileSystem.readFile(filePath, { 'encoding': 'utf-8' }))\n    let fileRecipe = Query.query(fileAst, '$..recipe[*]')\n    \n    fileDependency = dependencyBinary\n      .filter((binary) => {\n        let binaryPattern = new RegExp(`^[@|-]{0,2}${binary.binaryName}$|^[@|-]{0,2}${binary.binaryName}\\\\s+.*$|.*\\\\s+${binary.binaryName}\\\\s+.*|.*\\\\s+${binary.binaryName}$`, 'm')\n        return fileRecipe\n          .filter((recipe) => binaryPattern.test(recipe))\n          .length > 0\n      })\n      .map((binary) => binary.packageName)\n      .filter((dependency, index, fileDependency) => fileDependency.indexOf(dependency) === index)\n\n  }\n\n  return fileDependency\n\n}"]}