{"version":3,"sources":["../../../source/library/special/make.js"],"names":["FileSystem","Match","Parse","Path","Query","GetDependencyBinary","Make","filePath","packageDependency","packagePath","fileDependency","fileName","basename","filePattern","reduce","isMatch","pattern","dependencyBinary","pathExists","ast","fileAst","readFile","fileRecipe","query","filter","binary","binaryPattern","RegExp","binaryName","recipe","test","length","map","packageName","dependency","index","indexOf"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,KAAP,MAAkB,sBAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,SAASC,mBAAT,QAAoC,6BAApC;;AAEA;;AAEA,OAAO,eAAeC,IAAf,CAAoBC,QAApB,EAA8BC,iBAA9B,EAAiDC,WAAjD,EAA8D;AACnE;AACA;;AAEA,MAAIC,cAAc,GAAG,EAArB;;AAEA,MAAIC,QAAQ,GAAGR,IAAI,CAACS,QAAL,CAAcL,QAAd,CAAf;AACA,MAAIM,WAAW,GAAG,CAAC,UAAD,EAAa,UAAb,CAAlB;;AAEA;AACA;AACA;AACA;;AAEA,MAAIA,WAAW,CAACC,MAAZ,CAAmB,CAACC,OAAD,EAAUC,OAAV,KAAsBD,OAAO,GAAGA,OAAH,GAAad,KAAK,CAACU,QAAD,EAAWK,OAAX,CAAlE,EAAuF,KAAvF,CAAJ,EAAmG;;AAEjG,QAAIC,gBAAgB,GAAG,MAAMZ,mBAAmB,CAACG,iBAAD,EAAoB,OAAMR,UAAU,CAACkB,UAAX,CAAuB,GAAET,WAAY,eAArC,CAAN,IAA8D,GAAEA,WAAY,eAA5E,GAA6FA,WAAjH,CAAhD;;AAEA,QAAI,EAAEU,GAAG,EAAEC,OAAP,KAAmBlB,KAAK,CAAC,MAAMF,UAAU,CAACqB,QAAX,CAAoBd,QAApB,EAA8B,EAAE,YAAY,OAAd,EAA9B,CAAP,CAA5B;AACA,QAAIe,UAAU,GAAGlB,KAAK,CAACmB,KAAN,CAAYH,OAAZ,EAAqB,cAArB,CAAjB;;AAEAV,IAAAA,cAAc,GAAGO,gBAAgB;AAC9BO,IAAAA,MADc,CACNC,MAAD,IAAY;AAClB,UAAIC,aAAa,GAAG,IAAIC,MAAJ,CAAY,YAAWF,MAAM,CAACG,UAAW,SAAzC,EAAmD,GAAnD,CAApB;AACA,aAAON,UAAU;AACdE,MAAAA,MADI,CACIK,MAAD,IAAYH,aAAa,CAACI,IAAd,CAAmBD,MAAnB,CADf;AAEJE,MAAAA,MAFI,GAEK,CAFZ;AAGD,KANc;AAOdC,IAAAA,GAPc,CAOTP,MAAD,IAAYA,MAAM,CAACQ,WAPT;AAQdT,IAAAA,MARc,CAQP,CAACU,UAAD,EAAaC,KAAb,EAAoBzB,cAApB,KAAuCA,cAAc,CAAC0B,OAAf,CAAuBF,UAAvB,MAAuCC,KARvE,CAAjB;;AAUD;;AAED,SAAOzB,cAAP;;AAED","sourcesContent":["import FileSystem from 'fs-extra'\n// import Is from '@pwn/is'\nimport Match from 'minimatch'\nimport Parse from '@kba/makefile-parser'\nimport Path from 'path'\nimport Query from 'jsonpath'\n\nimport { GetDependencyBinary } from '../get-dependency-binary.js'\n\n// const Process = process\n\nexport async function Make(filePath, packageDependency, packagePath) {\n  // console.log(`Make('${Path.relative('', filePath)}', packageDependency, '${Path.relative('', packagePath)}') { ... }`)\n  // console.dir(packageDependency)\n\n  let fileDependency = []\n\n  let fileName = Path.basename(filePath)\n  let filePattern = ['Makefile', 'makefile']\n\n  // if (Is.not.undefined(Process.env['MAKEFILE'])) {\n  //   filePattern.concat(Process.env['MAKEFILE'].split(' ')\n  //     .map((path) => Path.basename(path)))\n  // }\n\n  if (filePattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(fileName, pattern), false)) {\n\n    let dependencyBinary = await GetDependencyBinary(packageDependency, await FileSystem.pathExists(`${packagePath}/node_modules`) ? `${packagePath}/node_modules` : packagePath)\n\n    let { ast: fileAst } = Parse(await FileSystem.readFile(filePath, { 'encoding': 'utf-8' }))\n    let fileRecipe = Query.query(fileAst, '$..recipe[*]')\n    \n    fileDependency = dependencyBinary\n      .filter((binary) => {\n        let binaryPattern = new RegExp(`(^|@|\\\\s)${binary.binaryName}($|\\\\s)`, 'm')\n        return fileRecipe\n          .filter((recipe) => binaryPattern.test(recipe))\n          .length > 0\n      })\n      .map((binary) => binary.packageName)\n      .filter((dependency, index, fileDependency) => fileDependency.indexOf(dependency) === index)\n\n  }\n\n  return fileDependency\n\n}"],"file":"make.js"}