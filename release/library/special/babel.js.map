{"version":3,"sources":["../../../source/library/special/babel.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,UAAvB;AACA,OAAO,EAAP,MAAe,SAAf;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAP,MAAkB,WAAlB;AACA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAP,MAAkB,UAAlB;;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;;AAEA,OAAO,eAAe,KAAf,CAAqB,QAArB,EAA+B,iBAA/B,EAAkD;AACvD;AACA;;AAEA,MAAI,cAAc,GAAG,EAArB;;AAEA,MAAI,QAAQ,GAAG,IAAI,CAAC,QAAL,CAAc,QAAd,CAAf;AACA,MAAI,OAAO,GAAG,CAAE,cAAF,EAAkB,mBAAlB,EAAuC,eAAvC,CAAd;;AAEA,MAAI,OAAO,CAAC,MAAR,CAAe,CAAC,OAAD,EAAU,OAAV,KAAsB,OAAO,GAAG,OAAH,GAAa,KAAK,CAAC,QAAD,EAAW,OAAX,EAAoB,EAAE,OAAO,IAAT,EAApB,CAA9D,EAAoG,KAApG,CAAJ,EAAgH;;AAE9G,QAAI,aAAa,GAAG,IAApB;AACA,IAAA,aAAa,GAAG,KAAK,CAAC,KAAN,CAAY,MAAM,UAAU,CAAC,QAAX,CAAoB,QAApB,EAA8B,EAAE,YAAY,OAAd,EAA9B,CAAlB,CAAhB;AACA,IAAA,aAAa,GAAG,QAAQ,KAAK,cAAb,GAA+B,aAAa,CAAC,KAAd,IAAuB,EAAtD,GAA4D,aAA5E;;AAEA,QAAI,MAAM,GAAG,IAAb;AACA,IAAA,MAAM,GAAG,KAAK,CAAC,KAAN,CAAY,aAAZ,EAA2B,eAA3B,CAAT;AACA,IAAA,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,MAAD,KAAY,EAAE,CAAC,KAAH,CAAS,MAAT,KAAoB,MAAM,KAAK,YAAzD,CAAT;AACA,IAAA,MAAM,GAAG,MAAM,CAAC,GAAP,CAAW,CAAC,MAAD,KAAY,EAAE,CAAC,KAAH,CAAS,MAAT,IAAmB,MAAM,CAAC,CAAD,CAAzB,GAA+B,MAAtD,CAAT;AACA,IAAA,MAAM,GAAG,MAAM,CAAC,GAAP,CAAW,CAAC,MAAD,KAAY,iBAAiB,CAAC,MAAD,CAAxC,CAAT;;AAEA,QAAI,MAAM,GAAG,IAAb;AACA,IAAA,MAAM,GAAG,KAAK,CAAC,KAAN,CAAY,aAAZ,EAA2B,eAA3B,CAAT;AACA,IAAA,MAAM,GAAG,MAAM,CAAC,GAAP,CAAW,CAAC,MAAD,KAAY,EAAE,CAAC,KAAH,CAAS,MAAT,IAAmB,MAAM,CAAC,CAAD,CAAzB,GAA+B,MAAtD,CAAT;AACA,IAAA,MAAM,GAAG,MAAM,CAAC,GAAP,CAAW,CAAC,MAAD,KAAY,iBAAiB,CAAC,MAAD,CAAxC,CAAT;;AAEA,IAAA,cAAc,GAAG,CAAC,GAAG,MAAJ,EAAY,GAAG,MAAf;AACd,IAAA,GADc,CACV,CAAC,UAAD,KAAgB,iBAAiB;AACnC,IAAA,MADkB,CACX,CAAC,iBAAD,KAAuB,iBAAiB,CAAC,QAAlB,CAA2B,UAA3B,CADZ;AAElB,IAAA,MAFkB,CAEX,CAAC,UAAD,EAAa,iBAAb,KAAmC,iBAFxB,EAE2C,UAF3C,CADN,CAAjB;;AAKD;;AAED;AACA,SAAO,cAAP;;AAED","file":"babel.js","sourcesContent":["import FileSystem from 'fs-extra'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Match from 'minimatch'\nimport Path from 'path'\nimport Query from 'jsonpath'\n\nimport { GetDependencyName } from '../get-dependency-name.js'\n\nexport async function Babel(filePath, packageDependency) {\n  // console.log(`Babel('${Path.relative('', filePath)}', packageDependency) { ... }`)\n  // console.dir(packageDependency)\n\n  let fileDependency = []\n\n  let fileName = Path.basename(filePath)\n  let pattern = [ 'package.json', 'babel.config.json', '.babelrc.json' ]\n\n  if (pattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(fileName, pattern, { 'dot': true }), false)) {\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(filePath, { 'encoding': 'utf-8' }))\n    configuration = fileName === 'package.json' ? (configuration.babel || {}) : configuration\n\n    let plugin = null\n    plugin = Query.query(configuration, '$..plugins[*]')\n    plugin = plugin.filter((plugin) => Is.array(plugin) || plugin !== 'importMeta')\n    plugin = plugin.map((plugin) => Is.array(plugin) ? plugin[0] : plugin)\n    plugin = plugin.map((plugin) => GetDependencyName(plugin))\n\n    let preset = null\n    preset = Query.query(configuration, '$..presets[*]')\n    preset = preset.map((preset) => Is.array(preset) ? preset[0] : preset)\n    preset = preset.map((preset) => GetDependencyName(preset))\n    \n    fileDependency = [...plugin, ...preset]\n      .map((dependency) => packageDependency\n        .filter((packageDependency) => packageDependency.endsWith(dependency))\n        .reduce((dependency, packageDependency) => packageDependency, dependency))\n\n  }\n\n  // console.dir(fileDependency)\n  return fileDependency\n\n}"]}