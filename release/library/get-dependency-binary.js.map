{"version":3,"sources":["../../source/library/get-dependency-binary.js"],"names":["FileSystem","Find","Is","JSON5","Process","process","GetDependencyBinary","packageDependency","dependencyPath","cwd","dependencyBinary","packagePath","fileSync","_packagePath","name","packageName","bin","packageBinary","parse","readFile","not","undefined","string","push","property","filter","binary","includes","sort","leftBinary","rightBinary","equal","localeCompare","binaryName"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,EAAP,MAAe,SAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,OAAO,GAAGC,OAAhB;;AAEA,OAAO,eAAeC,mBAAf,CAAmCC,iBAAnC,EAAsDC,cAAc,GAAI,GAAEJ,OAAO,CAACK,GAAR,EAAc,eAAxF,EAAwG;;AAE7G,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,WAAW,GAAGV,IAAI,CAACW,QAAL,CAAc,gBAAd,EAAgCJ,cAAhC,CAAlB;;AAEA,OAAK,IAAIK,YAAT,IAAyBF,WAAzB,EAAsC;;AAEpC,QAAI,EAAEG,IAAI,EAAEC,WAAR,EAAqBC,GAAG,EAAEC,aAA1B,KAA4Cd,KAAK,CAACe,KAAN,CAAY,MAAMlB,UAAU,CAACmB,QAAX,CAAoBN,YAApB,EAAkC,EAAE,YAAY,OAAd,EAAlC,CAAlB,CAAhD;;AAEA,QAAIX,EAAE,CAACkB,GAAH,CAAOC,SAAP,CAAiBJ,aAAjB,CAAJ,EAAqC;;AAEnC,UAAIf,EAAE,CAACoB,MAAH,CAAUL,aAAV,CAAJ,EAA8B;AAC5BP,QAAAA,gBAAgB,CAACa,IAAjB,CAAsB,EAAE,eAAeR,WAAjB,EAA8B,cAAcA,WAA5C,EAAtB;AACD,OAFD,MAEO;;AAEL,aAAK,IAAIS,QAAT,IAAqBP,aAArB,EAAoC;AAClCP,UAAAA,gBAAgB,CAACa,IAAjB,CAAsB,EAAE,eAAeR,WAAjB,EAA8B,cAAcS,QAA5C,EAAtB;AACD;;AAEF;;AAEF;;AAEF;;AAED,SAAOd,gBAAgB;AACpBe,EAAAA,MADI,CACG,CAACC,MAAD,KAAYnB,iBAAiB,CAACoB,QAAlB,CAA2BD,MAAM,CAACX,WAAlC,CADf;AAEJa,EAAAA,IAFI,CAEC,CAACC,UAAD,EAAaC,WAAb,KAA6B5B,EAAE,CAACkB,GAAH,CAAOW,KAAP,CAAaF,UAAU,CAACd,WAAxB,EAAqCe,WAAW,CAACf,WAAjD,IAAgEc,UAAU,CAACd,WAAX,CAAuBiB,aAAvB,CAAqCF,WAAW,CAACf,WAAjD,CAAhE,GAAgIc,UAAU,CAACI,UAAX,CAAsBD,aAAtB,CAAoCF,WAAW,CAACG,UAAhD,CAF9J,CAAP;;AAID","sourcesContent":["import FileSystem from 'fs-extra'\nimport Find from 'find'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\n\nconst Process = process\n\nexport async function GetDependencyBinary(packageDependency, dependencyPath = `${Process.cwd()}/node_modules`) {\n\n  let dependencyBinary = []\n  let packagePath = Find.fileSync(/package\\.json$/, dependencyPath)\n\n  for (let _packagePath of packagePath) {\n\n    let { name: packageName, bin: packageBinary } = JSON5.parse(await FileSystem.readFile(_packagePath, { 'encoding': 'utf-8' }))\n\n    if (Is.not.undefined(packageBinary)) {\n\n      if (Is.string(packageBinary)) {\n        dependencyBinary.push({ 'packageName': packageName, 'binaryName': packageName })\n      } else {\n\n        for (let property in packageBinary) {\n          dependencyBinary.push({ 'packageName': packageName, 'binaryName': property })\n        }\n\n      }\n\n    }\n\n  }\n\n  return dependencyBinary\n    .filter((binary) => packageDependency.includes(binary.packageName))\n    .sort((leftBinary, rightBinary) => Is.not.equal(leftBinary.packageName, rightBinary.packageName) ? leftBinary.packageName.localeCompare(rightBinary.packageName) : leftBinary.binaryName.localeCompare(rightBinary.binaryName))\n\n}\n"],"file":"get-dependency-binary.js"}