{"version":3,"sources":["../../source/library/get-dependency-binary.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,UAAvB;AACA,OAAO,IAAP,MAAiB,MAAjB;AACA,OAAO,EAAP,MAAe,SAAf;AACA,OAAO,KAAP,MAAkB,OAAlB;;AAEA,MAAM,OAAO,GAAG,OAAhB;;AAEA,OAAO,eAAe,mBAAf,CAAmC,iBAAnC,EAAsD,cAAc,GAAI,GAAE,OAAO,CAAC,GAAR,EAAc,eAAxF,EAAwG;;AAE7G,MAAI,gBAAgB,GAAG,EAAvB;AACA,MAAI,WAAW,GAAG,IAAI,CAAC,QAAL,CAAc,gBAAd,EAAgC,cAAhC,CAAlB;;AAEA,OAAK,IAAI,YAAT,IAAyB,WAAzB,EAAsC;;AAEpC,QAAI,EAAE,IAAI,EAAE,WAAR,EAAqB,GAAG,EAAE,aAA1B,KAA4C,KAAK,CAAC,KAAN,CAAY,MAAM,UAAU,CAAC,QAAX,CAAoB,YAApB,EAAkC,EAAE,YAAY,OAAd,EAAlC,CAAlB,CAAhD;;AAEA,QAAI,EAAE,CAAC,GAAH,CAAO,SAAP,CAAiB,aAAjB,CAAJ,EAAqC;;AAEnC,UAAI,EAAE,CAAC,MAAH,CAAU,aAAV,CAAJ,EAA8B;AAC5B,QAAA,gBAAgB,CAAC,IAAjB,CAAsB,EAAE,eAAe,WAAjB,EAA8B,cAAc,WAA5C,EAAtB;AACD,OAFD,MAEO;;AAEL,aAAK,IAAI,QAAT,IAAqB,aAArB,EAAoC;AAClC,UAAA,gBAAgB,CAAC,IAAjB,CAAsB,EAAE,eAAe,WAAjB,EAA8B,cAAc,QAA5C,EAAtB;AACD;;AAEF;;AAEF;;AAEF;;AAED,SAAO,gBAAgB;AACpB,EAAA,MADI,CACG,CAAC,MAAD,KAAY,iBAAiB,CAAC,QAAlB,CAA2B,MAAM,CAAC,WAAlC,CADf;AAEJ,EAAA,IAFI,CAEC,CAAC,UAAD,EAAa,WAAb,KAA6B,EAAE,CAAC,GAAH,CAAO,KAAP,CAAa,UAAU,CAAC,WAAxB,EAAqC,WAAW,CAAC,WAAjD,IAAgE,UAAU,CAAC,WAAX,CAAuB,aAAvB,CAAqC,WAAW,CAAC,WAAjD,CAAhE,GAAgI,UAAU,CAAC,UAAX,CAAsB,aAAtB,CAAoC,WAAW,CAAC,UAAhD,CAF9J,CAAP;;AAID","file":"get-dependency-binary.js","sourcesContent":["import FileSystem from 'fs-extra'\nimport Find from 'find'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\n\nconst Process = process\n\nexport async function GetDependencyBinary(packageDependency, dependencyPath = `${Process.cwd()}/node_modules`) {\n\n  let dependencyBinary = []\n  let packagePath = Find.fileSync(/package\\.json$/, dependencyPath)\n\n  for (let _packagePath of packagePath) {\n\n    let { name: packageName, bin: packageBinary } = JSON5.parse(await FileSystem.readFile(_packagePath, { 'encoding': 'utf-8' }))\n\n    if (Is.not.undefined(packageBinary)) {\n\n      if (Is.string(packageBinary)) {\n        dependencyBinary.push({ 'packageName': packageName, 'binaryName': packageName })\n      } else {\n\n        for (let property in packageBinary) {\n          dependencyBinary.push({ 'packageName': packageName, 'binaryName': property })\n        }\n\n      }\n\n    }\n\n  }\n\n  return dependencyBinary\n    .filter((binary) => packageDependency.includes(binary.packageName))\n    .sort((leftBinary, rightBinary) => Is.not.equal(leftBinary.packageName, rightBinary.packageName) ? leftBinary.packageName.localeCompare(rightBinary.packageName) : leftBinary.binaryName.localeCompare(rightBinary.binaryName))\n\n}\n"]}