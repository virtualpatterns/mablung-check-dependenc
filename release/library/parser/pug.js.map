{"version":3,"sources":["../../../source/library/parser/pug.js"],"names":[],"mappings":"AAAA,OAAO,UAAP,MAAuB,UAAvB;AACA;AACA,OAAO,KAAP,MAAkB,UAAlB;;AAEA,OAAO,GAAP,MAAgB,WAAhB;AACA,OAAO,IAAP,MAAiB,UAAjB;AACA,OAAO,KAAP,MAAkB,YAAlB;;AAEA,SAAS,iBAAT,QAAkC,2BAAlC;;AAEA,OAAO,eAAe,GAAf,CAAmB,QAAnB,EAA6B,iBAA7B,EAAgD;AACrD;AACA;;AAEA,MAAI,cAAc,GAAG,EAArB;;AAEA,MAAI,OAAO,GAAG,MAAM,UAAU,CAAC,QAAX,CAAoB,QAApB,EAA8B,EAAE,YAAY,OAAd,EAA9B,CAApB;AACA,MAAI,KAAK,GAAG,IAAZ;AACA,MAAI,GAAG,GAAG,IAAV;;AAEA,EAAA,KAAK,GAAG,GAAG,CAAC,OAAD,EAAU,EAAE,YAAY,QAAd,EAAV,CAAX;AACA,EAAA,GAAG,GAAG,KAAK,CAAC,KAAD,EAAQ,EAAE,YAAY,QAAd,EAAR,CAAX;AACA,EAAA,GAAG,GAAG,IAAI,CAAC,GAAD,EAAM,EAAE,OAAO,GAAT,EAAc,SAAS,KAAvB,EAAN,CAAV;;AAEA;;AAEA,MAAI,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,EAAiB,0DAAjB,CAAX;AACA,MAAI,UAAU,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,IAAD,KAAU,iBAAiB,CAAC,IAAI,CAAC,IAAN,CAApC,CAAjB;;AAEA,EAAA,cAAc,GAAG,UAAU;AACxB,EAAA,GADc,CACV,CAAC,UAAD,KAAgB,iBAAiB;AACnC,EAAA,MADkB,CACX,CAAC,iBAAD,KAAuB,iBAAiB,CAAC,QAAlB,CAA2B,UAA3B,CADZ;AAElB,EAAA,MAFkB,CAEX,CAAC,UAAD,EAAa,iBAAb,KAAmC,iBAFxB,EAE2C,UAF3C,CADN,CAAjB;;AAKA,SAAO,cAAP;;AAED","file":"pug.js","sourcesContent":["import FileSystem from 'fs-extra'\n// import Path from 'path'\nimport Query from 'jsonpath'\n\nimport Lex from 'pug-lexer'\nimport Load from 'pug-load'\nimport Parse from 'pug-parser'\n\nimport { GetDependencyName } from '../get-dependency-name.js'\n\nexport async function Pug(filePath, packageDependency) {\n  // console.log(`Pug('${Path.relative('', filePath)}', packageDependency) { ... }`)\n  // console.dir(packageDependency)\n\n  let fileDependency = []\n\n  let content = await FileSystem.readFile(filePath, { 'encoding': 'utf-8' })\n  let token = null\n  let ast = null\n\n  token = Lex(content, { 'filename': filePath })\n  ast = Parse(token, { 'filename': filePath })\n  ast = Load(ast, { 'lex': Lex, 'parse': Parse })\n\n  // console.dir(ast, { 'depth': null })\n\n  let node = Query.query(ast, '$..*[?(@.type==\\'Filter\\' || @.type==\\'IncludeFilter\\')]')\n  let dependency = node.map((node) => GetDependencyName(node.name))\n  \n  fileDependency = dependency\n    .map((dependency) => packageDependency\n      .filter((packageDependency) => packageDependency.endsWith(dependency))\n      .reduce((dependency, packageDependency) => packageDependency, dependency))\n\n  return fileDependency\n\n}"]}