{"version":3,"sources":["../../source/library/check.js"],"names":[],"mappings":"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","file":"check.js","sourcesContent":["import BaseCheck from 'depcheck'\nimport BaseTransform from 'node-json-transform'\nimport Is from '@pwn/is'\nimport Merge from 'deepmerge'\nimport Path from 'path'\n\nimport { Ava } from './special/ava.js'\nimport { Babel } from './special/babel.js'\nimport { Browser } from './parser/browser.js'\nimport { Make } from './special/make.js'\nimport { Parcel } from './parser/parcel.js'\nimport { Pug } from './parser/pug.js'\n\nimport { FileParseError } from './error/file-parse-error.js'\nimport { FolderParseError } from './error/folder-parse-error.js'\n\nconst { transform: Transform } = BaseTransform\nconst Process = process\n\nexport function Check(userPath = Process.cwd(), userOption = {}) {\n  \n  return new Promise((resolve, reject) => {\n\n    try {\n\n      let defaultOption = {\n        'parser': {\n          '**/*.cjs': BaseCheck.parser.es7.default, // [ BaseCheck.parser.es6, BaseCheck.parser.es7.default ],\n          '**/*.js': BaseCheck.parser.es7.default, // [ BaseCheck.parser.es6, BaseCheck.parser.es7.default ],\n          '**/*.mjs': BaseCheck.parser.es7.default, // [ BaseCheck.parser.es6, BaseCheck.parser.es7.default ],\n          '**/*.pug': Pug,\n          '**/package.json': [ Browser, Parcel ]\n        },\n        'special': [\n          // BaseCheck.special.babel,\n          BaseCheck.special.bin,\n          BaseCheck.special.eslint,\n          Ava,\n          Babel,\n          Make\n        ]\n      }\n  \n      let map = {\n        'item': {\n          'ignoreMatches': 'ignoreMatch',\n          'ignorePatterns': 'ignorePattern',\n          'package': {\n            'dependencies': 'package.dependency',\n            'devDependencies': 'package.devDependency',\n            'peerDependencies': 'package.peerDependency',\n            'optionalDependencies': 'package.optionalDependency'\n          },\n          'parsers': 'parser',\n          'specials': 'special'\n        },\n        'each': (item) => {\n          if (Is.emptyObject(item.package)) {\n            delete item.package\n          }\n          return item\n        }\n      }\n  \n      let path = Path.resolve(userPath)\n      let option = Transform(Merge(defaultOption, userOption), map)\n\n      BaseCheck(path, option, (unused) => {\n        \n        // console.dir(unused.using)\n\n        if (Is.emptyObject(unused.invalidFiles) && \n            Is.emptyObject(unused.invalidDirs)) {\n  \n          resolve({\n            'missing': unused.missing,\n            'unused': [ ...unused.dependencies, ...unused.devDependencies ],\n            'used': unused.using\n          })\n  \n        } else {\n  \n          if (Is.emptyObject(unused.invalidDirs)) {\n\n            let item = Object.entries(unused.invalidFiles)\n\n            let path = item[0][0]\n            let error = item[0][1]\n\n            reject(new FileParseError(path, error))\n\n          } else {\n\n            let item = Object.entries(unused.invalidDirs)\n\n            let path = item[0][0]\n            let error = item[0][1]\n\n            reject(new FolderParseError(path, error))\n\n          }\n  \n        }\n  \n      })\n\n    } catch(error) {\n      reject(error)\n    }\n\n  })\n\n}"]}