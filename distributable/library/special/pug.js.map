{"version":3,"sources":["../../../source/library/special/pug.js"],"names":["FileSystem","Query","Match","Path","Lex","Link","Load","Parse","GetDependencyName","Pug","filePath","packageDependency","fileDependency","fileName","basename","pattern","reduce","isMatch","content","readFile","lexerOutput","parserOutput","loaderOutput","AST","node","query","name","map","length","filter","endsWith"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,IAAP,MAAiB,UAAjB;AACA,OAAOC,KAAP,MAAkB,YAAlB;;AAEA,SAASC,iBAAT,QAAkC,0BAAlC;;AAEA,OAAO,eAAeC,GAAf,CAAmBC,QAAnB,EAA6BC,iBAA7B,EAAgD;AACrD;AACA;;AAEA,MAAIC,cAAc,GAAG,EAArB;;AAEA,MAAIC,QAAQ,GAAGV,IAAI,CAACW,QAAL,CAAcJ,QAAd,CAAf;AACA,MAAIK,OAAO,GAAG,CAAE,OAAF,CAAd;;AAEA,MAAIA,OAAO,CAACC,MAAR,CAAe,CAACC,OAAD,EAAUF,OAAV,KAAsBE,OAAO,GAAGA,OAAH,GAAaf,KAAK,CAACW,QAAD,EAAWE,OAAX,EAAoB,EAAE,OAAO,IAAT,EAApB,CAA9D,EAAoG,KAApG,CAAJ,EAAgH;;AAE9G,QAAIG,OAAO,GAAG,MAAMlB,UAAU,CAACmB,QAAX,CAAoBT,QAApB,EAA8B,EAAE,YAAY,OAAd,EAA9B,CAApB;;AAEA,QAAIU,WAAW,GAAGhB,GAAG,CAACc,OAAD,EAAU,EAAE,YAAYR,QAAd,EAAV,CAArB;AACA,QAAIW,YAAY,GAAGd,KAAK,CAACa,WAAD,EAAc,EAAE,YAAYV,QAAd,EAAd,CAAxB;AACA,QAAIY,YAAY,GAAGhB,IAAI,CAACe,YAAD,EAAe,EAAE,OAAOjB,GAAT,EAAc,SAASG,KAAvB,EAAf,CAAvB;AACA,QAAIgB,GAAG,GAAGlB,IAAI,CAACiB,YAAD,CAAd;;AAEA,QAAIE,IAAI,GAAGvB,KAAK,CAACwB,KAAN,CAAYF,GAAZ,EAAiB,6BAAjB,CAAX;AACA,QAAIG,IAAI,GAAGF,IAAI,CAACG,GAAL,CAAUH,IAAD,IAAUhB,iBAAiB,CAACgB,IAAI,CAACE,IAAN,CAApC,CAAX;;AAEAd,IAAAA,cAAc,GAAG,CAACD,iBAAiB,CAACiB,MAAlB,IAA4B,CAA5B,GAAgCF,IAAhC,GAAuCf,iBAAxC,EAA2DkB,MAA3D,CAAmElB,iBAAD,IAAuBe,IAAI,CAACG,MAAL,CAAaH,IAAD,IAAUf,iBAAiB,CAACmB,QAAlB,CAA2BJ,IAA3B,CAAtB,EAAwDE,MAAxD,GAAiE,CAA1J,CAAjB;;AAED;;AAED,SAAOhB,cAAP;;AAED","sourcesContent":["import FileSystem from 'fs-extra'\nimport Query from 'jsonpath'\nimport Match from 'minimatch'\nimport Path from 'path'\n\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Parse from 'pug-parser'\n\nimport { GetDependencyName } from './get-dependency-name.js'\n\nexport async function Pug(filePath, packageDependency) {\n  // console.log(`Pug('${Path.relative('', filePath)}', packageDependency) { ... }`)\n  // console.dir(packageDependency)\n\n  let fileDependency = []\n\n  let fileName = Path.basename(filePath)\n  let pattern = [ '*.pug' ]\n\n  if (pattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(fileName, pattern, { 'dot': true }), false)) {\n\n    let content = await FileSystem.readFile(filePath, { 'encoding': 'utf-8' })\n\n    let lexerOutput = Lex(content, { 'filename': filePath })\n    let parserOutput = Parse(lexerOutput, { 'filename': filePath })\n    let loaderOutput = Load(parserOutput, { 'lex': Lex, 'parse': Parse })\n    let AST = Link(loaderOutput)\n\n    let node = Query.query(AST, '$..*[?(@.type==\\'Filter\\')]')\n    let name = node.map((node) => GetDependencyName(node.name))\n\n    fileDependency = (packageDependency.length <= 0 ? name : packageDependency).filter((packageDependency) => name.filter((name) => packageDependency.endsWith(name)).length > 0)\n\n  }\n\n  return fileDependency\n\n}"],"file":"pug.js"}