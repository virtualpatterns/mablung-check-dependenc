{"version":3,"sources":["../../../source/library/special/babel.js"],"names":["FileSystem","Is","JSON5","Match","Path","Query","Babel","path","dependency","fileName","basename","pattern","reduce","isMatch","configuration","parse","readFile","babel","plugin","query","filter","array","map","preset"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,EAAP,MAAe,SAAf;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,WAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,UAAlB;;AAEA,OAAO,eAAeC,KAAf,CAAqBC,IAArB,EAA2B;AAChC;;AAEA,MAAIC,UAAU,GAAG,EAAjB;;AAEA,MAAIC,QAAQ,GAAGL,IAAI,CAACM,QAAL,CAAcH,IAAd,CAAf;;AAEA,MAAII,OAAO,GAAG,CAAE,cAAF,EAAkB,mBAAlB,EAAuC,eAAvC,CAAd;;AAEA,MAAIA,OAAO,CAACC,MAAR,CAAe,CAACC,OAAD,EAAUF,OAAV,KAAsBE,OAAO,GAAGA,OAAH,GAAaV,KAAK,CAACM,QAAD,EAAWE,OAAX,EAAoB,EAAE,OAAO,IAAT,EAApB,CAA9D,EAAoG,KAApG,CAAJ,EAAgH;;AAE9G,QAAIG,aAAa,GAAG,IAApB;AACAA,IAAAA,aAAa,GAAGZ,KAAK,CAACa,KAAN,CAAY,MAAMf,UAAU,CAACgB,QAAX,CAAoBT,IAApB,EAA0B,EAAE,YAAY,OAAd,EAA1B,CAAlB,CAAhB;AACAO,IAAAA,aAAa,GAAGL,QAAQ,KAAK,cAAb,GAA+BK,aAAa,CAACG,KAAd,IAAuB,EAAtD,GAA4DH,aAA5E;;AAEA,QAAII,MAAM,GAAG,IAAb;AACAA,IAAAA,MAAM,GAAGb,KAAK,CAACc,KAAN,CAAYL,aAAZ,EAA2B,eAA3B,CAAT;AACAI,IAAAA,MAAM,GAAGA,MAAM,CAACE,MAAP,CAAeF,MAAD,IAAYjB,EAAE,CAACoB,KAAH,CAASH,MAAT,KAAoBA,MAAM,KAAK,YAAzD,CAAT;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAACI,GAAP,CAAYJ,MAAD,IAAYjB,EAAE,CAACoB,KAAH,CAASH,MAAT,IAAmBA,MAAM,CAAC,CAAD,CAAzB,GAA+BA,MAAtD,CAAT;;AAEA,QAAIK,MAAM,GAAG,IAAb;AACAA,IAAAA,MAAM,GAAGlB,KAAK,CAACc,KAAN,CAAYL,aAAZ,EAA2B,eAA3B,CAAT;AACAS,IAAAA,MAAM,GAAGA,MAAM,CAACD,GAAP,CAAYC,MAAD,IAAYtB,EAAE,CAACoB,KAAH,CAASE,MAAT,IAAmBA,MAAM,CAAC,CAAD,CAAzB,GAA+BA,MAAtD,CAAT;;AAEAf,IAAAA,UAAU,GAAG,CAAE,GAAGU,MAAL,EAAa,GAAGK,MAAhB,CAAb;;AAED;;AAED,SAAOf,UAAP;;AAED","sourcesContent":["import FileSystem from 'fs-extra'\nimport Is from '@pwn/is'\nimport JSON5 from 'json5'\nimport Match from 'minimatch'\nimport Path from 'path'\nimport Query from 'jsonpath'\n\nexport async function Babel(path) {\n  // console.log(`Babel('${Path.relative('', path)}') { ... }`)\n\n  let dependency = []\n\n  let fileName = Path.basename(path)\n\n  let pattern = [ 'package.json', 'babel.config.json', '.babelrc.json' ]\n\n  if (pattern.reduce((isMatch, pattern) => isMatch ? isMatch : Match(fileName, pattern, { 'dot': true }), false)) {\n\n    let configuration = null\n    configuration = JSON5.parse(await FileSystem.readFile(path, { 'encoding': 'utf-8' }))\n    configuration = fileName === 'package.json' ? (configuration.babel || {}) : configuration\n\n    let plugin = null\n    plugin = Query.query(configuration, '$..plugins[*]')\n    plugin = plugin.filter((plugin) => Is.array(plugin) || plugin !== 'importMeta')\n    plugin = plugin.map((plugin) => Is.array(plugin) ? plugin[0] : plugin)\n\n    let preset = null\n    preset = Query.query(configuration, '$..presets[*]')\n    preset = preset.map((preset) => Is.array(preset) ? preset[0] : preset)\n\n    dependency = [ ...plugin, ...preset ]\n\n  }\n\n  return dependency\n\n}"],"file":"babel.js"}