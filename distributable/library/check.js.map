{"version":3,"sources":["../../source/library/check.js"],"names":["BaseCheck","Is","Merge","Transform","Ava","Babel","Process","process","Check","userPath","cwd","userOption","Promise","resolve","reject","path","defaultOption","parser","es6","special","bin","eslint","map","item","emptyObject","package","option","transform","unused","invalidFiles","invalidDirs","dependencies","devDependencies","missing","fileError","Object","entries","console","log","folderError","error"],"mappings":"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","sourcesContent":["import BaseCheck from 'depcheck'\nimport Is from '@pwn/is'\nimport Merge from 'deepmerge'\nimport Transform from 'node-json-transform'\n\nimport { Ava } from './special/ava.js'\nimport { Babel } from './special/babel.js'\n\nconst Process = process\n\nexport function Check(userPath = Process.cwd(), userOption = {}) {\n\n  return new Promise((resolve, reject) => {\n\n    try {\n\n      let path = userPath\n\n      let defaultOption = {\n        'ignorePattern': [\n          'distributable'\n        ],\n        'parser': {\n          '*.js': BaseCheck.parser.es6,\n          '*.cjs': BaseCheck.parser.es6\n        },\n        'special': [\n          BaseCheck.special.bin,\n          BaseCheck.special.eslint,\n          Ava,\n          Babel\n        ]\n      }\n  \n      let map = {\n        'item': {\n          'ignoreMatches': 'ignoreMatch',\n          'ignorePatterns': 'ignorePattern',\n          'package': {\n            'dependencies': 'package.dependency',\n            'devDependencies': 'package.devDependency',\n            'peerDependencies': 'package.peerDependency',\n            'optionalDependencies': 'package.optionalDependency'\n          },\n          'parsers': 'parser',\n          'specials': 'special'\n        },\n        'each': (item) => {\n          if (Is.emptyObject(item.package)) {\n            delete item.package\n          }\n          return item\n        }\n      }\n  \n      let option = Transform.transform(Merge(defaultOption, userOption), map)\n\n      BaseCheck(path, option, (unused) => {\n  \n        if (Is.emptyObject(unused.invalidFiles) && \n            Is.emptyObject(unused.invalidDirs)) {\n  \n          resolve({\n            'unused': [ ...unused.dependencies, ...unused.devDependencies ],\n            'missing': unused.missing\n          })\n  \n        } else {\n  \n          if (Is.emptyObject(unused.invalidDirs)) {\n            let fileError = Object.entries(unused.invalidFiles)\n            console.log(fileError[0][0])\n            reject(fileError[0][1])\n          } else {\n            let folderError = Object.entries(unused.invalidDirs)\n            reject(folderError[0][1])\n          }\n  \n        }\n  \n      })\n    } catch(error) {\n      reject(error)\n    }\n\n  })\n\n}"],"file":"check.js"}