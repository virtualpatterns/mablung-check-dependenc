{"version":3,"sources":["../../../source/library/parser/pug.js"],"names":["FileSystem","Query","Path","Lex","Link","Load","Parse","GetDependencyName","Pug","filePath","packageDependency","fileDependency","content","readFile","lexerOutput","parserOutput","loaderOutput","AST","node","query","name","map","length","filter","endsWith"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,UAAvB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAOC,IAAP,MAAiB,UAAjB;AACA,OAAOC,KAAP,MAAkB,YAAlB;;AAEA,SAASC,iBAAT,QAAkC,2BAAlC;;AAEA,OAAO,eAAeC,GAAf,CAAmBC,QAAnB,EAA6BC,iBAA7B,EAAgD;AACrD;AACA;;AAEA,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,OAAO,GAAG,MAAMZ,UAAU,CAACa,QAAX,CAAoBJ,QAApB,EAA8B,EAAE,YAAY,OAAd,EAA9B,CAApB;;AAEA,MAAIK,WAAW,GAAGX,GAAG,CAACS,OAAD,EAAU,EAAE,YAAYH,QAAd,EAAV,CAArB;AACA,MAAIM,YAAY,GAAGT,KAAK,CAACQ,WAAD,EAAc,EAAE,YAAYL,QAAd,EAAd,CAAxB;AACA,MAAIO,YAAY,GAAGX,IAAI,CAACU,YAAD,EAAe,EAAE,OAAOZ,GAAT,EAAc,SAASG,KAAvB,EAAf,CAAvB;AACA,MAAIW,GAAG,GAAGb,IAAI,CAACY,YAAD,CAAd;;AAEA,MAAIE,IAAI,GAAGjB,KAAK,CAACkB,KAAN,CAAYF,GAAZ,EAAiB,6BAAjB,CAAX;AACA,MAAIG,IAAI,GAAGF,IAAI,CAACG,GAAL,CAAUH,IAAD,IAAUX,iBAAiB,CAACW,IAAI,CAACE,IAAN,CAApC,CAAX;;AAEAT,EAAAA,cAAc,GAAG,CAACD,iBAAiB,CAACY,MAAlB,IAA4B,CAA5B,GAAgCF,IAAhC,GAAuCV,iBAAxC,EAA2Da,MAA3D,CAAmEb,iBAAD,IAAuBU,IAAI,CAACG,MAAL,CAAaH,IAAD,IAAUV,iBAAiB,CAACc,QAAlB,CAA2BJ,IAA3B,CAAtB,EAAwDE,MAAxD,GAAiE,CAA1J,CAAjB;;AAEA,SAAOX,cAAP;;AAED","sourcesContent":["import FileSystem from 'fs-extra'\nimport Query from 'jsonpath'\nimport Path from 'path'\n\nimport Lex from 'pug-lexer'\nimport Link from 'pug-linker'\nimport Load from 'pug-load'\nimport Parse from 'pug-parser'\n\nimport { GetDependencyName } from '../get-dependency-name.js'\n\nexport async function Pug(filePath, packageDependency) {\n  // console.log(`Pug('${Path.relative('', filePath)}', packageDependency) { ... }`)\n  // console.dir(packageDependency)\n\n  let fileDependency = []\n  let content = await FileSystem.readFile(filePath, { 'encoding': 'utf-8' })\n\n  let lexerOutput = Lex(content, { 'filename': filePath })\n  let parserOutput = Parse(lexerOutput, { 'filename': filePath })\n  let loaderOutput = Load(parserOutput, { 'lex': Lex, 'parse': Parse })\n  let AST = Link(loaderOutput)\n\n  let node = Query.query(AST, '$..*[?(@.type==\\'Filter\\')]')\n  let name = node.map((node) => GetDependencyName(node.name))\n\n  fileDependency = (packageDependency.length <= 0 ? name : packageDependency).filter((packageDependency) => name.filter((name) => packageDependency.endsWith(name)).length > 0)\n\n  return fileDependency\n\n}"],"file":"pug.js"}